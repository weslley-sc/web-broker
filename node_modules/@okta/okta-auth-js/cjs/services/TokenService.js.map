{"version":3,"sources":["../../../lib/services/TokenService.ts"],"names":["shouldThrottleRenew","renewTimeQueue","res","push","Date","now","length","firstTime","shift","lastTime","TokenService","constructor","tokenManager","options","start","onTokenExpiredHandler","key","autoRenew","error","AuthSdkError","emitError","renew","catch","autoRemove","remove","on","EVENT_EXPIRED","setExpireEventTimeoutAll","syncStorage","storageListener","newValue","oldValue","handleCrossTabsStorageChange","resetExpireEventTimeoutAll","emitEventsForCrossTabsStorageUpdate","storageKey","syncTimeout","setTimeout","_storageEventDelay","window","addEventListener","stop","clearExpireEventTimeoutAll","off","removeEventListener","clearTimeout"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* global window */\nimport { TokenManager, EVENT_EXPIRED } from '../TokenManager';\nimport { AuthSdkError } from '../errors';\nimport { isBrowser } from '../features';\nimport { TokenManagerOptions } from '../types';\n\nfunction shouldThrottleRenew(renewTimeQueue) {\n  let res = false;\n  renewTimeQueue.push(Date.now());\n  if (renewTimeQueue.length >= 10) {\n    // get and remove first item from queue\n    const firstTime = renewTimeQueue.shift();\n    const lastTime = renewTimeQueue[renewTimeQueue.length - 1];\n    res = lastTime - firstTime < 30 * 1000;\n  }\n  return res;\n}\n\nexport class TokenService {\n  private tokenManager: TokenManager;\n  private options: TokenManagerOptions;\n  private storageListener: (event: StorageEvent) => void;\n  private onTokenExpiredHandler: (key: string) => void;\n  private syncTimeout: unknown;\n\n  constructor(tokenManager: TokenManager, options: TokenManagerOptions = {}) {\n    this.tokenManager = tokenManager;\n    this.options = options;\n  }\n\n  start() {\n    const renewTimeQueue = [];\n    this.onTokenExpiredHandler = (key) => {\n      if (this.options.autoRenew) {\n        if (shouldThrottleRenew(renewTimeQueue)) {\n          const error = new AuthSdkError('Too many token renew requests');\n          this.tokenManager.emitError(error);\n        } else {\n          this.tokenManager.renew(key).catch(() => {}); // Renew errors will emit an \"error\" event \n        }\n      } else if (this.options.autoRemove) {\n        this.tokenManager.remove(key);\n      }\n    };\n    this.tokenManager.on(EVENT_EXPIRED, this.onTokenExpiredHandler);\n\n    this.tokenManager.setExpireEventTimeoutAll();\n\n    if (this.options.syncStorage && isBrowser()) {\n      // Sync authState cross multiple tabs when localStorage is used as the storageProvider\n      // A StorageEvent is sent to a window when a storage area it has access to is changed \n      // within the context of another document.\n      // https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent\n\n      this.storageListener = ({ key, newValue, oldValue }: StorageEvent) => {\n        const handleCrossTabsStorageChange = () => {\n          this.tokenManager.resetExpireEventTimeoutAll();\n          this.tokenManager.emitEventsForCrossTabsStorageUpdate(newValue, oldValue);\n        };\n\n        // Skip if:\n        // not from localStorage.clear (event.key is null)\n        // event.key is not the storageKey\n        // oldValue === newValue\n        if (key && (key !== this.options.storageKey || newValue === oldValue)) {\n          return;\n        }\n\n        // LocalStorage cross tabs update is not synced in IE, set a 1s timer by default to read latest value\n        // https://stackoverflow.com/questions/24077117/localstorage-in-win8-1-ie11-does-not-synchronize\n        this.syncTimeout = setTimeout(() => handleCrossTabsStorageChange(), this.options._storageEventDelay);\n      };\n\n      window.addEventListener('storage', this.storageListener);\n    }\n  }\n\n  stop() {\n    this.tokenManager.clearExpireEventTimeoutAll();\n    this.tokenManager.off(EVENT_EXPIRED, this.onTokenExpiredHandler);\n    if (this.options.syncStorage && isBrowser()) {\n      window.removeEventListener('storage', this.storageListener);\n      clearTimeout(this.syncTimeout as any);\n    }\n  }\n}"],"file":"TokenService.js"}