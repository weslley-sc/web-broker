{"version":3,"sources":["../../../../../lib/idx/remediators/Base/SelectAuthenticator.ts"],"names":["findMatchedOption","authenticators","options","option","authenticator","find","relatesTo","type","SelectAuthenticator","Remediator","constructor","remediation","values","selectedAuthenticator","hasSelectedAuthenticatorInList","some","canRemediate","authenticatorFromRemediation","length","matchedOption","getNextStep","common","map","label","value","mapAuthenticator","remediationValue","selectedOption","id","form","name","getInputAuthenticator"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { getAuthenticatorFromRemediation } from '../util';\nimport { IdxRemediation, IdxRemediationValue } from '../../types/idx-js';\nimport { Authenticator } from '../../types';\n\n// Find matched authenticator in provided order\nfunction findMatchedOption(authenticators, options) {\n  let option;\n  for (let authenticator of authenticators) {\n    option = options\n      .find(({ relatesTo }) => relatesTo.type === authenticator.type);\n    if (option) {\n      break;\n    }\n  }\n  return option;\n}\n\nexport type SelectAuthenticatorValues = RemediationValues & {\n  authenticator?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class SelectAuthenticator extends Remediator {\n  values: SelectAuthenticatorValues;\n  matchedOption: IdxRemediation;\n  \n  map = {\n    authenticator: []\n  }\n\n  constructor(remediation: IdxRemediation, values: SelectAuthenticatorValues = {}) {\n    super(remediation, values);\n    \n    // Unify authenticator input type\n    const { authenticator: selectedAuthenticator, authenticators } = this.values;\n    const hasSelectedAuthenticatorInList = authenticators\n        ?.some((authenticator => authenticator.type === selectedAuthenticator));\n    if (selectedAuthenticator && !hasSelectedAuthenticatorInList) {\n      // add selected authenticator to list\n      this.values.authenticators = [\n        ...(authenticators || []), \n        { type: selectedAuthenticator }\n      ] as Authenticator[];\n    }\n  }\n\n  canRemediate() {\n    const { authenticators } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const { options } = authenticatorFromRemediation;\n    // Let users select authenticator if no input is provided\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n    // Proceed with provided authenticators\n    const matchedOption = findMatchedOption(authenticators, options);\n    if (matchedOption) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  getNextStep() {\n    const common = super.getNextStep();\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const options = authenticatorFromRemediation.options.map(option => {\n      const { \n        label, \n        relatesTo: { type } \n      } = option;\n      return { label, value: type };\n    });\n    return { ...common, options };\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const { authenticators } = this.values;\n    const { options } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    return {\n      id: selectedOption?.value.form.value.find(({ name }) => name === 'id').value\n    };\n  }\n\n  getInputAuthenticator() {\n    return { name: 'authenticator', type: 'string' };\n  }\n\n}\n"],"file":"SelectAuthenticator.js"}