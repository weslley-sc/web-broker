{"version":3,"sources":["../../../lib/idx/register.ts"],"names":["flow","SelectEnrollProfile","EnrollProfile","AuthenticatorEnrollmentData","SelectAuthenticatorEnroll","EnrollAuthenticator","Skip","register","authClient","options","enabledFeatures","includes","IdxFeature","REGISTRATION","error","AuthSdkError","status","IdxStatus","FAILURE","flowMonitor","RegistrationFlowMonitor"],"mappings":";;;;AAaA;;AACA;;AACA;;AACA;;AAaA;;AACA;;AACA;;AA/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6BA,MAAMA,IAAqB,GAAG;AAC5B,2BAAyBC,gCADG;AAE5B,oBAAkBC,0BAFU;AAG5B,mCAAiCC,wCAHL;AAI5B,iCAA+BC,sCAJH;AAK5B,0BAAwBC,gCALI;AAM5B,UAAQC;AANoB,CAA9B;;AAgBO,eAAeC,QAAf,CACLC,UADK,EACiBC,OADjB,EAEoB;AACzB;AACA,MAAI,CAAC,2CAAqBD,UAArB,CAAL,EAAuC;AACrC,UAAM;AAAEE,MAAAA;AAAF,QAAsB,MAAM,wCAAiBF,UAAjB,EAA6BC,OAA7B,CAAlC;;AACA,QAAIC,eAAe,IAAI,CAACA,eAAe,CAACC,QAAhB,CAAyBC,kBAAWC,YAApC,CAAxB,EAA2E;AACzE,YAAMC,KAAK,GAAG,IAAIC,oBAAJ,CAAiB,wEAAjB,CAAd;AACA,aAAO;AAAEC,QAAAA,MAAM,EAAEC,iBAAUC,OAApB;AAA6BJ,QAAAA;AAA7B,OAAP;AACD;AACF;;AAED,QAAMK,WAAW,GAAG,IAAIC,qCAAJ,CAA4BZ,UAA5B,CAApB;AACA,SAAO,cAAIA,UAAJ,EAAgB,EACrB,GAAGC,OADkB;AAErBT,IAAAA,IAFqB;AAGrBmB,IAAAA;AAHqB,GAAhB,CAAP;AAKD","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run, RemediationFlow } from './run';\nimport { transactionMetaExist } from './transactionMeta';\nimport { startTransaction } from './startTransaction';\nimport { \n  SelectEnrollProfile,\n  EnrollProfile,\n  EnrollProfileValues,\n  SelectAuthenticatorEnroll,\n  SelectAuthenticatorEnrollValues,\n  EnrollAuthenticator,\n  EnrollAuthenticatorValues,\n  AuthenticatorEnrollmentData,\n  AuthenticatorEnrollmentDataValues,\n  Skip,\n  SkipValues,\n} from './remediators';\nimport { RegistrationFlowMonitor } from './flowMonitors';\nimport { AuthSdkError } from '../errors';\nimport { \n  IdxOptions, \n  IdxTransaction, \n  OktaAuth, \n  IdxFeature,\n  IdxStatus,\n} from '../types';\n\nconst flow: RemediationFlow = {\n  'select-enroll-profile': SelectEnrollProfile,\n  'enroll-profile': EnrollProfile,\n  'authenticator-enrollment-data': AuthenticatorEnrollmentData,\n  'select-authenticator-enroll': SelectAuthenticatorEnroll,\n  'enroll-authenticator': EnrollAuthenticator,\n  'skip': Skip,\n};\n\nexport type RegistrationOptions = IdxOptions \n  & EnrollProfileValues \n  & SelectAuthenticatorEnrollValues \n  & EnrollAuthenticatorValues \n  & AuthenticatorEnrollmentDataValues \n  & SkipValues;\n\nexport async function register(\n  authClient: OktaAuth, options: RegistrationOptions\n): Promise<IdxTransaction> {\n  // Only check at the beginning of the transaction\n  if (!transactionMetaExist(authClient)) {\n    const { enabledFeatures } = await startTransaction(authClient, options);\n    if (enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION)) {\n      const error = new AuthSdkError('Registration is not supported based on your current org configuration.');\n      return { status: IdxStatus.FAILURE, error };\n    }\n  }\n  \n  const flowMonitor = new RegistrationFlowMonitor(authClient);\n  return run(authClient, { \n    ...options, \n    flow,\n    flowMonitor,\n  });\n}\n"],"file":"register.js"}