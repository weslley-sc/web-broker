{"version":3,"sources":["../../lib/StorageManager.ts"],"names":["PKCE_STORAGE_NAME","TOKEN_STORAGE_NAME","TRANSACTION_STORAGE_NAME","IDX_RESPONSE_STORAGE_NAME","CACHE_STORAGE_NAME","REDIRECT_OAUTH_PARAMS_NAME","SavedObject","isBrowser","warn","AuthSdkError","logServerSideMemoryStorageWarning","options","storageProvider","StorageManager","constructor","storageManagerOptions","cookieOptions","storageUtil","getOptionsForSection","sectionName","overrideOptions","Object","assign","getStorage","storageType","storageTypes","sessionCookie","idx","indexOf","slice","findStorageType","getStorageByType","getTransactionStorage","storage","storageKey","getIdxResponseStorage","e","transactionStorage","getItem","key","transaction","setItem","val","setStorage","removeItem","getTokenStorage","getHttpCache","getLegacyPKCEStorage","getLegacyOAuthParamsStorage"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SACEA,iBADF,EAEEC,kBAFF,EAGEC,wBAHF,EAIEC,yBAJF,EAKEC,kBALF,EAMEC,0BANF,QAOO,aAPP;AAmBA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,YAAT,QAA6B,UAA7B;;AAEA,SAASC,iCAAT,CAA2CC,OAA3C,EAAoE;AAClE,MAAI,CAACJ,SAAS,EAAV,IAAgB,CAACI,OAAO,CAACC,eAAzB,IAA4C,CAACD,OAAO,CAACC,eAAzD,EAA0E;AACxE;AACAJ,IAAAA,IAAI,CAAC,6KAAD,CAAJ;AACD;AACF;;AAED,eAAe,MAAMK,cAAN,CAAqB;AAKlCC,EAAAA,WAAW,CAACC,qBAAD,EAA+CC,aAA/C,EAA6EC,WAA7E,EAAuG;AAChH,SAAKF,qBAAL,GAA6BA,qBAA7B;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD,GATiC,CAWlC;;;AACAC,EAAAA,oBAAoB,CAACC,WAAD,EAAsBC,eAAtB,EAAwD;AAC1E,WAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKP,qBAAL,CAA2BI,WAA3B,CAAlB,EAA2DC,eAA3D,CAAP;AACD,GAdiC,CAgBlC;;;AACAG,EAAAA,UAAU,CAACZ,OAAD,EAAyC;AACjDA,IAAAA,OAAO,GAAGU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKN,aAAvB,EAAsCL,OAAtC,CAAV,CADiD,CACS;;AAE1D,QAAIA,OAAO,CAACC,eAAZ,EAA6B;AAC3B,aAAOD,OAAO,CAACC,eAAf;AACD;;AAED,QAAI;AAAEY,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAgCd,OAApC;;AAEA,QAAGa,WAAW,KAAK,gBAAnB,EAAqC;AACnCb,MAAAA,OAAO,CAACe,aAAR,GAAwB,IAAxB;AACD,KAXgD,CAajD;;;AACA,QAAIF,WAAW,IAAIC,YAAnB,EAAiC;AAC/B,UAAME,GAAG,GAAGF,YAAY,CAACG,OAAb,CAAqBJ,WAArB,CAAZ;;AACA,UAAIG,GAAG,IAAI,CAAX,EAAc;AACZF,QAAAA,YAAY,GAAGA,YAAY,CAACI,KAAb,CAAmBF,GAAnB,CAAf;AACAH,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AAED,QAAI,CAACA,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,KAAKP,WAAL,CAAiBa,eAAjB,CAAiCL,YAAjC,CAAd;AACD;;AACD,WAAO,KAAKR,WAAL,CAAiBc,gBAAjB,CAAkCP,WAAlC,EAA+Cb,OAA/C,CAAP;AACD,GA3CiC,CA6ClC;;;AACAqB,EAAAA,qBAAqB,CAACrB,OAAD,EAA+C;AAClEA,IAAAA,OAAO,GAAG,KAAKO,oBAAL,CAA0B,aAA1B,EAAyCP,OAAzC,CAAV;AACAD,IAAAA,iCAAiC,CAACC,OAAD,CAAjC;AACA,QAAMsB,OAAO,GAAG,KAAKV,UAAL,CAAgBZ,OAAhB,CAAhB;AACA,QAAMuB,UAAU,GAAGvB,OAAO,CAACuB,UAAR,IAAsBhC,wBAAzC;AACA,WAAO,IAAII,WAAJ,CAAgB2B,OAAhB,EAAyBC,UAAzB,CAAP;AACD,GApDiC,CAsDlC;AACA;AACA;;;AACAC,EAAAA,qBAAqB,CAACxB,OAAD,EAA+C;AAClE,QAAIsB,OAAJ;;AACA,QAAI1B,SAAS,EAAb,EAAiB;AACf;AACA,UAAI;AACF0B,QAAAA,OAAO,GAAG,KAAKhB,WAAL,CAAiBc,gBAAjB,CAAkC,QAAlC,EAA4CpB,OAA5C,CAAV;AACD,OAFD,CAEE,OAAOyB,CAAP,EAAU;AACV;AACA;AACA5B,QAAAA,IAAI,CAAC,yIAAD,CAAJ;AACD;AACF,KATD,MASO;AACL;AACA,UAAM6B,kBAAkB,GAAG,KAAKL,qBAAL,CAA2BrB,OAA3B,CAA3B;;AACA,UAAI0B,kBAAJ,EAAwB;AACtBJ,QAAAA,OAAO,GAAG;AACRK,UAAAA,OAAO,EAAGC,GAAD,IAAS;AAChB,gBAAMC,WAAW,GAAGH,kBAAkB,CAACd,UAAnB,EAApB;;AACA,gBAAIiB,WAAW,IAAIA,WAAW,CAACD,GAAD,CAA9B,EAAqC;AACnC,qBAAOC,WAAW,CAACD,GAAD,CAAlB;AACD;;AACD,mBAAO,IAAP;AACD,WAPO;AAQRE,UAAAA,OAAO,EAAE,CAACF,GAAD,EAAMG,GAAN,KAAc;AACrB,gBAAMF,WAAW,GAAGH,kBAAkB,CAACd,UAAnB,EAApB;;AACA,gBAAI,CAACiB,WAAL,EAAkB;AAChB,oBAAM,IAAI/B,YAAJ,CAAiB,uDAAjB,CAAN;AACD;;AACD+B,YAAAA,WAAW,CAACD,GAAD,CAAX,GAAmBG,GAAnB;AACAL,YAAAA,kBAAkB,CAACM,UAAnB,CAA8BH,WAA9B;AACD,WAfO;AAgBRI,UAAAA,UAAU,EAAGL,GAAD,IAAS;AACnB,gBAAMC,WAAW,GAAGH,kBAAkB,CAACd,UAAnB,EAApB;;AACA,gBAAI,CAACiB,WAAL,EAAkB;AAChB;AACD;;AACD,mBAAOA,WAAW,CAACD,GAAD,CAAlB;AACAF,YAAAA,kBAAkB,CAACM,UAAnB,CAA8BH,WAA9B;AACD;AAvBO,SAAV;AAyBD;AACF;;AAED,QAAI,CAACP,OAAL,EAAc;AACZ,aAAO,IAAP;AACD;;AAED,WAAO,IAAI3B,WAAJ,CAAgB2B,OAAhB,EAAyB9B,yBAAzB,CAAP;AACD,GAzGiC,CA2GlC;;;AACA0C,EAAAA,eAAe,CAAClC,OAAD,EAA4C;AACzDA,IAAAA,OAAO,GAAG,KAAKO,oBAAL,CAA0B,OAA1B,EAAmCP,OAAnC,CAAV;AACAD,IAAAA,iCAAiC,CAACC,OAAD,CAAjC;AACA,QAAMsB,OAAO,GAAG,KAAKV,UAAL,CAAgBZ,OAAhB,CAAhB;AACA,QAAMuB,UAAU,GAAGvB,OAAO,CAACuB,UAAR,IAAsBjC,kBAAzC;AACA,WAAO,IAAIK,WAAJ,CAAgB2B,OAAhB,EAAyBC,UAAzB,CAAP;AACD,GAlHiC,CAoHlC;;;AACAY,EAAAA,YAAY,CAACnC,OAAD,EAA4C;AACtDA,IAAAA,OAAO,GAAG,KAAKO,oBAAL,CAA0B,OAA1B,EAAmCP,OAAnC,CAAV;AACA,QAAMsB,OAAO,GAAG,KAAKV,UAAL,CAAgBZ,OAAhB,CAAhB;AACA,QAAMuB,UAAU,GAAGvB,OAAO,CAACuB,UAAR,IAAsB9B,kBAAzC;AACA,WAAO,IAAIE,WAAJ,CAAgB2B,OAAhB,EAAyBC,UAAzB,CAAP;AACD,GA1HiC,CA4HlC;;;AACAa,EAAAA,oBAAoB,CAACpC,OAAD,EAAwC;AAC1DA,IAAAA,OAAO,GAAG,KAAKO,oBAAL,CAA0B,aAA1B,EAAyCP,OAAzC,CAAV;AACA,QAAMsB,OAAO,GAAG,KAAKV,UAAL,CAAgBZ,OAAhB,CAAhB;AACA,QAAMuB,UAAU,GAAGvB,OAAO,CAACuB,UAAR,IAAsBlC,iBAAzC;AACA,WAAO,IAAIM,WAAJ,CAAgB2B,OAAhB,EAAyBC,UAAzB,CAAP;AACD;;AAEDc,EAAAA,2BAA2B,CAACrC,OAAD,EAA4C;AACrEA,IAAAA,OAAO,GAAG,KAAKO,oBAAL,CAA0B,qBAA1B,EAAiDP,OAAjD,CAAV;AACA,QAAMsB,OAAO,GAAG,KAAKV,UAAL,CAAgBZ,OAAhB,CAAhB;AACA,QAAMuB,UAAU,GAAGvB,OAAO,CAACuB,UAAR,IAAsB7B,0BAAzC;AACA,WAAO,IAAIC,WAAJ,CAAgB2B,OAAhB,EAAyBC,UAAzB,CAAP;AACD;;AAzIiC","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n\nimport {\n  PKCE_STORAGE_NAME,\n  TOKEN_STORAGE_NAME,\n  TRANSACTION_STORAGE_NAME,\n  IDX_RESPONSE_STORAGE_NAME,\n  CACHE_STORAGE_NAME,\n  REDIRECT_OAUTH_PARAMS_NAME\n} from './constants';\nimport {\n  StorageUtil,\n  StorageProvider,\n  StorageOptions,\n  PKCEStorage,\n  CookieOptions,\n  TransactionStorage,\n  IdxResponseStorage,\n  StorageManagerOptions,\n  SimpleStorage\n} from './types';\nimport SavedObject from './SavedObject';\nimport { isBrowser } from './features';\nimport { warn } from './util';\nimport { AuthSdkError } from './errors';\n\nfunction logServerSideMemoryStorageWarning(options: StorageOptions) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    // eslint-disable-next-line max-len\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\nexport default class StorageManager {\n  storageManagerOptions: StorageManagerOptions;\n  cookieOptions: CookieOptions;\n  storageUtil: StorageUtil;\n\n  constructor(storageManagerOptions: StorageManagerOptions, cookieOptions: CookieOptions, storageUtil: StorageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  // combines defaults in order\n  getOptionsForSection(sectionName: string, overrideOptions?: StorageOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n \n  // generic method to get any available storage provider\n  getStorage(options: StorageOptions): SimpleStorage {\n    options = Object.assign({}, this.cookieOptions, options); // set defaults\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let { storageType, storageTypes } = options;\n\n    if(storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    // Maintain compatibility. Automatically fallback. May change in next major version. OKTA-362589\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = null;\n      }\n    }\n\n    if (!storageType) {\n      storageType = this.storageUtil.findStorageType(storageTypes);\n    }\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  // stateToken, interactionHandle\n  getTransactionStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // intermediate idxResponse\n  // store for network traffic optimazation purpose\n  // TODO: revisit in auth-js 6.0 epic JIRA: OKTA-399791\n  getIdxResponseStorage(options?: StorageOptions): IdxResponseStorage {\n    let storage;\n    if (isBrowser()) {\n      // on browser side only use memory storage \n      try {\n        storage = this.storageUtil.getStorageByType('memory', options);\n      } catch (e) {\n        // it's ok to miss response storage\n        // eslint-disable-next-line max-len\n        warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n      }\n    } else {\n      // on server side re-use transaction custom storage\n      const transactionStorage = this.getTransactionStorage(options);\n      if (transactionStorage) {\n        storage = {\n          getItem: (key) => {\n            const transaction = transactionStorage.getStorage();\n            if (transaction && transaction[key]) {\n              return transaction[key];\n            }\n            return null;\n          },\n          setItem: (key, val) => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n            }\n            transaction[key] = val;\n            transactionStorage.setStorage(transaction);\n          },\n          removeItem: (key) => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              return;\n            }\n            delete transaction[key];\n            transactionStorage.setStorage(transaction);\n          }\n        };\n      }\n    }\n\n    if (!storage) {\n      return null;\n    }\n\n    return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n  }\n\n  // access_token, id_token, refresh_token\n  getTokenStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // caches well-known response, among others\n  getHttpCache(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // Will be removed in an upcoming major version. OKTA-362589\n  getLegacyPKCEStorage(options?: StorageOptions): PKCEStorage {\n    options = this.getOptionsForSection('legacy-pkce', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyOAuthParamsStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('legacy-oauth-params', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n}\n"],"file":"StorageManager.js"}