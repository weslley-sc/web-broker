{"version":3,"sources":["../../../lib/idx/register.ts"],"names":["run","transactionMetaExist","startTransaction","SelectEnrollProfile","EnrollProfile","SelectAuthenticatorEnroll","EnrollAuthenticator","AuthenticatorEnrollmentData","Skip","RegistrationFlowMonitor","AuthSdkError","IdxFeature","IdxStatus","flow","register","authClient","options","enabledFeatures","includes","REGISTRATION","error","status","FAILURE","flowMonitor"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,GAAT,QAAqC,OAArC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACEC,mBADF,EAEEC,aAFF,EAIEC,yBAJF,EAMEC,mBANF,EAQEC,2BARF,EAUEC,IAVF,QAYO,eAZP;AAaA,SAASC,uBAAT,QAAwC,gBAAxC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAIEC,UAJF,EAKEC,SALF,QAMO,UANP;AAQA,IAAMC,IAAqB,GAAG;AAC5B,2BAAyBV,mBADG;AAE5B,oBAAkBC,aAFU;AAG5B,mCAAiCG,2BAHL;AAI5B,iCAA+BF,yBAJH;AAK5B,0BAAwBC,mBALI;AAM5B,UAAQE;AANoB,CAA9B;AAgBA,gBAAsBM,QAAtB;AAAA;AAAA;;;gCAAO,WACLC,UADK,EACiBC,OADjB,EAEoB;AACzB;AACA,QAAI,CAACf,oBAAoB,CAACc,UAAD,CAAzB,EAAuC;AACrC,UAAM;AAAEE,QAAAA;AAAF,gBAA4Bf,gBAAgB,CAACa,UAAD,EAAaC,OAAb,CAAlD;;AACA,UAAIC,eAAe,IAAI,CAACA,eAAe,CAACC,QAAhB,CAAyBP,UAAU,CAACQ,YAApC,CAAxB,EAA2E;AACzE,YAAMC,KAAK,GAAG,IAAIV,YAAJ,CAAiB,wEAAjB,CAAd;AACA,eAAO;AAAEW,UAAAA,MAAM,EAAET,SAAS,CAACU,OAApB;AAA6BF,UAAAA;AAA7B,SAAP;AACD;AACF;;AAED,QAAMG,WAAW,GAAG,IAAId,uBAAJ,CAA4BM,UAA5B,CAApB;AACA,WAAOf,GAAG,CAACe,UAAD,kCACLC,OADK;AAERH,MAAAA,IAFQ;AAGRU,MAAAA;AAHQ,OAAV;AAKD,G","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run, RemediationFlow } from './run';\nimport { transactionMetaExist } from './transactionMeta';\nimport { startTransaction } from './startTransaction';\nimport { \n  SelectEnrollProfile,\n  EnrollProfile,\n  EnrollProfileValues,\n  SelectAuthenticatorEnroll,\n  SelectAuthenticatorEnrollValues,\n  EnrollAuthenticator,\n  EnrollAuthenticatorValues,\n  AuthenticatorEnrollmentData,\n  AuthenticatorEnrollmentDataValues,\n  Skip,\n  SkipValues,\n} from './remediators';\nimport { RegistrationFlowMonitor } from './flowMonitors';\nimport { AuthSdkError } from '../errors';\nimport { \n  IdxOptions, \n  IdxTransaction, \n  OktaAuth, \n  IdxFeature,\n  IdxStatus,\n} from '../types';\n\nconst flow: RemediationFlow = {\n  'select-enroll-profile': SelectEnrollProfile,\n  'enroll-profile': EnrollProfile,\n  'authenticator-enrollment-data': AuthenticatorEnrollmentData,\n  'select-authenticator-enroll': SelectAuthenticatorEnroll,\n  'enroll-authenticator': EnrollAuthenticator,\n  'skip': Skip,\n};\n\nexport type RegistrationOptions = IdxOptions \n  & EnrollProfileValues \n  & SelectAuthenticatorEnrollValues \n  & EnrollAuthenticatorValues \n  & AuthenticatorEnrollmentDataValues \n  & SkipValues;\n\nexport async function register(\n  authClient: OktaAuth, options: RegistrationOptions\n): Promise<IdxTransaction> {\n  // Only check at the beginning of the transaction\n  if (!transactionMetaExist(authClient)) {\n    const { enabledFeatures } = await startTransaction(authClient, options);\n    if (enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION)) {\n      const error = new AuthSdkError('Registration is not supported based on your current org configuration.');\n      return { status: IdxStatus.FAILURE, error };\n    }\n  }\n  \n  const flowMonitor = new RegistrationFlowMonitor(authClient);\n  return run(authClient, { \n    ...options, \n    flow,\n    flowMonitor,\n  });\n}\n"],"file":"register.js"}