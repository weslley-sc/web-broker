{"version":3,"sources":["../../../../../lib/idx/remediators/Base/SelectAuthenticator.ts"],"names":["Remediator","getAuthenticatorFromRemediation","findMatchedOption","authenticators","options","option","authenticator","find","relatesTo","type","SelectAuthenticator","constructor","remediation","values","selectedAuthenticator","hasSelectedAuthenticatorInList","some","canRemediate","authenticatorFromRemediation","length","matchedOption","getNextStep","common","map","label","value","mapAuthenticator","remediationValue","selectedOption","id","form","name","getInputAuthenticator"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { getAuthenticatorFromRemediation } from '../util';\nimport { IdxRemediation, IdxRemediationValue } from '../../types/idx-js';\nimport { Authenticator } from '../../types';\n\n// Find matched authenticator in provided order\nfunction findMatchedOption(authenticators, options) {\n  let option;\n  for (let authenticator of authenticators) {\n    option = options\n      .find(({ relatesTo }) => relatesTo.type === authenticator.type);\n    if (option) {\n      break;\n    }\n  }\n  return option;\n}\n\nexport type SelectAuthenticatorValues = RemediationValues & {\n  authenticator?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class SelectAuthenticator extends Remediator {\n  values: SelectAuthenticatorValues;\n  matchedOption: IdxRemediation;\n  \n  map = {\n    authenticator: []\n  }\n\n  constructor(remediation: IdxRemediation, values: SelectAuthenticatorValues = {}) {\n    super(remediation, values);\n    \n    // Unify authenticator input type\n    const { authenticator: selectedAuthenticator, authenticators } = this.values;\n    const hasSelectedAuthenticatorInList = authenticators\n        ?.some((authenticator => authenticator.type === selectedAuthenticator));\n    if (selectedAuthenticator && !hasSelectedAuthenticatorInList) {\n      // add selected authenticator to list\n      this.values.authenticators = [\n        ...(authenticators || []), \n        { type: selectedAuthenticator }\n      ] as Authenticator[];\n    }\n  }\n\n  canRemediate() {\n    const { authenticators } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const { options } = authenticatorFromRemediation;\n    // Let users select authenticator if no input is provided\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n    // Proceed with provided authenticators\n    const matchedOption = findMatchedOption(authenticators, options);\n    if (matchedOption) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  getNextStep() {\n    const common = super.getNextStep();\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const options = authenticatorFromRemediation.options.map(option => {\n      const { \n        label, \n        relatesTo: { type } \n      } = option;\n      return { label, value: type };\n    });\n    return { ...common, options };\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const { authenticators } = this.values;\n    const { options } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    return {\n      id: selectedOption?.value.form.value.find(({ name }) => name === 'id').value\n    };\n  }\n\n  getInputAuthenticator() {\n    return { name: 'authenticator', type: 'string' };\n  }\n\n}\n"],"file":"SelectAuthenticator.js"}