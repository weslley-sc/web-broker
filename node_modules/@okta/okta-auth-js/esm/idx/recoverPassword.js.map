{"version":3,"sources":["../../../lib/idx/recoverPassword.ts"],"names":["run","Identify","SelectAuthenticatorAuthenticate","ChallengeAuthenticator","AuthenticatorVerificationData","ResetAuthenticator","ReEnrollAuthenticator","PasswordRecoveryFlowMonitor","flow","recoverPassword","authClient","options","flowMonitor","actions"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,GAAT,QAAqC,OAArC;AACA,SACEC,QADF,EAGEC,+BAHF,EAKEC,sBALF,EAOEC,6BAPF,EASEC,kBATF,EAWEC,qBAXF,QAaO,eAbP;AAcA,SAASC,2BAAT,QAA4C,gBAA5C;AAOA,IAAMC,IAAqB,GAAG;AAC5B,cAAYP,QADgB;AAE5B,uBAAqBA,QAFO;AAG5B,uCAAqCC,+BAHT;AAI5B,6BAA2BC,sBAJC;AAK5B,qCAAmCC,6BALP;AAM5B,yBAAuBC,kBANK;AAO5B,4BAA0BC;AAPE,CAA9B;AAkBA,gBAAsBG,eAAtB;AAAA;AAAA;;;uCAAO,WACLC,UADK,EACiBC,OADjB,EAEoB;AACzB,QAAMC,WAAW,GAAG,IAAIL,2BAAJ,CAAgCG,UAAhC,CAApB;AACA,WAAOV,GAAG,CACRU,UADQ,kCAGHC,OAHG;AAINH,MAAAA,IAJM;AAKNI,MAAAA,WALM;AAMNC,MAAAA,OAAO,EAAE,CACP,8BADO,EAEP,wCAFO;AANH,OAAV;AAYD,G","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run, RemediationFlow } from './run';\nimport {\n  Identify,\n  IdentifyValues,\n  SelectAuthenticatorAuthenticate,\n  SelectAuthenticatorAuthenticateValues,\n  ChallengeAuthenticator,\n  ChallengeAuthenticatorValues,\n  AuthenticatorVerificationData,\n  AuthenticatorVerificationDataValues,\n  ResetAuthenticator,\n  ResetAuthenticatorValues,\n  ReEnrollAuthenticator,\n  ReEnrollAuthenticatorValues,\n} from './remediators';\nimport { PasswordRecoveryFlowMonitor } from './flowMonitors';\nimport { \n  OktaAuth, \n  IdxOptions, \n  IdxTransaction,\n} from '../types';\n\nconst flow: RemediationFlow = {\n  'identify': Identify,\n  'identify-recovery': Identify,\n  'select-authenticator-authenticate': SelectAuthenticatorAuthenticate,\n  'challenge-authenticator': ChallengeAuthenticator,\n  'authenticator-verification-data': AuthenticatorVerificationData,\n  'reset-authenticator': ResetAuthenticator,\n  'reenroll-authenticator': ReEnrollAuthenticator,\n};\n\nexport type PasswordRecoveryOptions = IdxOptions \n  & IdentifyValues \n  & SelectAuthenticatorAuthenticateValues \n  & ChallengeAuthenticatorValues \n  & ResetAuthenticatorValues\n  & AuthenticatorVerificationDataValues\n  & ReEnrollAuthenticatorValues;\n\nexport async function recoverPassword(\n  authClient: OktaAuth, options: PasswordRecoveryOptions\n): Promise<IdxTransaction> {\n  const flowMonitor = new PasswordRecoveryFlowMonitor(authClient);\n  return run(\n    authClient, \n    { \n      ...options,\n      flow,\n      flowMonitor,\n      actions: [\n        'currentAuthenticator-recover', \n        'currentAuthenticatorEnrollment-recover'\n      ],\n    }\n  );\n}\n"],"file":"recoverPassword.js"}