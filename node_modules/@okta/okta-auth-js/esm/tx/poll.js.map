{"version":3,"sources":["../../../lib/tx/poll.ts"],"names":["post","isNumber","isObject","getLink","toQueryString","delay","delayFn","DEFAULT_POLLING_DELAY","AuthSdkError","AuthPollStopError","TransactionState","AuthTransaction","getStateToken","getPollFn","sdk","res","ref","options","rememberDevice","autoPush","transactionCallBack","pollLink","pollFn","opts","e","Promise","reject","undefined","href","saveAuthnState","withCredentials","isPolling","retryCount","recursivePoll","then","pollRes","factorResult","catch","err","xhr","status","delayLength","Math","pow"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { post } from '../http';\nimport { isNumber, isObject, getLink, toQueryString, delay as delayFn } from '../util';\nimport { DEFAULT_POLLING_DELAY } from '../constants';\nimport AuthSdkError from '../errors/AuthSdkError';\nimport AuthPollStopError from '../errors/AuthPollStopError';\nimport { TransactionState } from './TransactionState';\nimport { AuthTransaction } from './AuthTransaction';\nimport { getStateToken } from './util';\n\nexport interface PollOptions {\n  delay?: number;\n  rememberDevice?: boolean;\n  autoPush?: boolean;\n  transactionCallBack?: (TransactionState) => void;\n}\n\nexport function getPollFn(sdk, res: TransactionState, ref) {\n  return function (options: PollOptions | number) {\n    var delay;\n    var rememberDevice;\n    var autoPush;\n    var transactionCallBack;\n\n    if (isNumber(options)) {\n      delay = options;\n    } else if (isObject(options)) {\n      options = options as PollOptions;\n      delay = options.delay;\n      rememberDevice = options.rememberDevice;\n      autoPush = options.autoPush;\n      transactionCallBack = options.transactionCallBack;\n    }\n\n    if (!delay && delay !== 0) {\n      delay = DEFAULT_POLLING_DELAY;\n    }\n\n    // Get the poll function\n    var pollLink = getLink(res, 'next', 'poll');\n    // eslint-disable-next-line complexity\n    function pollFn() {\n      var opts = {} as PollOptions;\n      if (typeof autoPush === 'function') {\n        try {\n          opts.autoPush = !!autoPush();\n        }\n        catch (e) {\n          return Promise.reject(new AuthSdkError('AutoPush resulted in an error.'));\n        }\n      }\n      else if (autoPush !== undefined && autoPush !== null) {\n        opts.autoPush = !!autoPush;\n      }\n      if (typeof rememberDevice === 'function') {\n        try {\n          opts.rememberDevice = !!rememberDevice();\n        }\n        catch (e) {\n          return Promise.reject(new AuthSdkError('RememberDevice resulted in an error.'));\n        }\n      }\n      else if (rememberDevice !== undefined && rememberDevice !== null) {\n        opts.rememberDevice = !!rememberDevice;\n      }\n\n      var href = pollLink.href + toQueryString(opts);\n      return post(sdk, href, getStateToken(res), {\n        saveAuthnState: false,\n        withCredentials: true\n      });\n    }\n\n    ref.isPolling = true;\n\n    var retryCount = 0;\n    var recursivePoll = function () {\n      // If the poll was manually stopped during the delay\n      if (!ref.isPolling) {\n        return Promise.reject(new AuthPollStopError());\n      }\n      return pollFn()\n        .then(function (pollRes) {\n          // Reset our retry counter on success\n          retryCount = 0;\n\n          // If we're still waiting\n          if (pollRes.factorResult && pollRes.factorResult === 'WAITING') {\n\n            // If the poll was manually stopped while the pollFn was called\n            if (!ref.isPolling) {\n              throw new AuthPollStopError();\n            }\n\n            if (typeof transactionCallBack === 'function') {\n              transactionCallBack(pollRes);\n            }\n\n            // Continue poll\n            return delayFn(delay).then(recursivePoll);\n\n          } else {\n            // Any non-waiting result, even if polling was stopped\n            // during a request, will return\n            ref.isPolling = false;\n            return new AuthTransaction(sdk, pollRes);\n          }\n        })\n        .catch(function(err) {\n          // Exponential backoff, up to 16 seconds\n          if (err.xhr &&\n              (err.xhr.status === 0 || err.xhr.status === 429) &&\n              retryCount <= 4) {\n            var delayLength = Math.pow(2, retryCount) * 1000;\n            retryCount++;\n            return delayFn(delayLength)\n              .then(recursivePoll);\n          }\n          throw err;\n        });\n    };\n    return recursivePoll()\n      .catch(function(err) {\n        ref.isPolling = false;\n        throw err;\n      });\n  };\n}\n"],"file":"poll.js"}